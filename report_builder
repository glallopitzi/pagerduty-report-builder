#!/bin/bash
# ------------------------------------------------------------------
# [gianc] report_builder
#          Description
# ------------------------------------------------------------------

VERSION=0.1.0
SUBJECT=report_builder

USAGE="Usage: report_builder [getAll|list|details INCIDENT_ID|report]"

# --- Options processing -------------------------------------------

if [ $# == 0 ] ; then
    echo $USAGE
    exit 1;
fi


ACTION=$1
SUBACTION=$2

echo "ACTION" $ACTION
echo "SUBACTION" $SUBACTION

###########################################

# set some variables
source common_variables

# include parser
source parser

function getAllIncidentsNew {

	AUX_RESULT="aux.result.json"
	
	INCIDENTS_REMAINED=1000
	TOTAL_REQUESTED=0
	
	LIMIT_KEY="--data-urlencode limit="
	LIMIT_VALUE=100
	ITERATION_LIMIT="$LIMIT_KEY$LIMIT_VALUE"

	OFFSET_KEY="--data-urlencode offset="
	OFFSET_VALUE=0
	ITERATION_OFFSET="$OFFSET_KEY$OFFSET_VALUE"

	writeLine
	logMsg "getAllIncidentsNew|BEGIN"
	echo 

	ITERATION_COUNTER=1
	while [ $INCIDENTS_REMAINED -gt 0 ] && [ $ITERATION_COUNTER -lt 10 ]; do
		writeLine
		echo "interation $ITERATION_COUNTER BEGIN"

		curl -H $HEADER --basic --user $AUTH -X GET -G $SINCE $UNTIL $FIELD $ITERATION_LIMIT $ITERATION_OFFSET $BASEURL/incidents > $AUX_RESULT

		TOTAL_REQ=`cat $AUX_RESULT | ./jq '.total'`
		LIMIT_REQ=`cat $AUX_RESULT | ./jq '.limit'`
		OFFSET_REQ=`cat $AUX_RESULT | ./jq '.offset'`

		logMsg "total req: $TOTAL_REQ"
		logMsg "offset req: $OFFSET_REQ"
		logMsg "limit req: $LIMIT_REQ"

		cat $AUX_RESULT | ./jq '.incidents[].id' >> $RESULT_INCIDENTS_ID

		writeLine
		echo "interation $ITERATION_COUNTER END"
		echo 

		# some loop vars update
		OFFSET_VALUE=$((OFFSET_VALUE + LIMIT_VALUE))
		ITERATION_OFFSET="$OFFSET_KEY$OFFSET_VALUE"
		ITERATION_COUNTER=$((ITERATION_COUNTER+1))
		INCIDENTS_REMAINED=$((TOTAL_REQ - ( OFFSET_REQ + LIMIT_REQ )))
	done
	echo "getAllIncidentsNew|END"
}


function getAllIncidents {
	writeLine
	echo "getting list of incidents.."
	curl -H $HEADER --basic --user $AUTH -X GET -G $SINCE $UNTIL $FIELD $BASEURL/incidents > $TMP_GLOBAL_RESULT	
	echo "list of incidents response saved in $TMP_GLOBAL_RESULT file"
}

function getSingleIncident {
	writeLine
	echo "getting details for incident with id: $1" 
	curl -H $HEADER --basic --user $AUTH -X GET -G $BASEURL/incidents/$1/log_entries > $TMP_SINGLE_RESULT
	echo "details response for incident with id: $1 saved in $TMP_SINGLE_RESULT file" 
}

function parseIncidentsIdList {
	while read p; do
		echo "elapsing incident with id: $p"
		getSingleIncident $p
		sleep 3
		parseSingleIncident
		echo "sleeping now.."
		sleep 3
	done < $RESULT_INCIDENTS_ID
}



if [ "$ACTION" = 'getAll' ]; then
	getAllIncidentsNew
	writeLine
fi

if [ "$ACTION" = 'parse' ]; then
	parseIncidentsIdList
	writeLine
fi


if [ "$ACTION" = 'list' ]; then
	getAllIncidents
	writeLine
	sleep 3
	parseAllIncidents
	writeLine
fi


if [ "$ACTION" = 'details' ] && [ "$SUBACTION" != '' ]; then
	INCIDENTID=$SUBACTION
	getSingleIncident $INCIDENTID
	writeLine
	sleep 3
	parseSingleIncident
fi


if [ "$ACTION" = 'report' ]; then
	#getAllIncidents	
	#writeLine
	#sleep 3
	hasMoreIncidents=0
	index=0
	while [ $index -le 1 ] && [ $hasMoreIncidents -eq 0 ]; do
		INCIDENTID=`cat $TMP_GLOBAL_RESULT | ./jq '.incidents['$index'].id'`
		if [ "$INCIDENTID" != '' ] && [ "$INCIDENTID" != 'null' ]; then
			sleep 1
			echo "trying to get details for incident number $index with id: $INCIDENTID"
			writeLine
			getSingleIncident $INCIDENTID
			sleep 1
			writeLine
			parseSingleIncident
			sleep 1
		else
			echo "no more incidents"
			hasMoreIncidents=1
		fi
		index=$(( $index + 1 ))
	done	
fi

